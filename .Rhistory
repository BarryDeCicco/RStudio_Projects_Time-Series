install.packages("fpp2")
library(fpp2)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
library(fpp2)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
View(melsyd)
help("autoplot")
View(a10)
autoplot(a10) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
help("autoplot")
View(a10)
ggseasonplot(a10, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(a10, polar=TRUE) +
ylab("$ million") +
ggtitle("Polar seasonal plot: antidiabetic drug sales")
ggsubseriesplot(a10) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
library(fpp2)
library(ggplot2)
autoplot(elecsales) + xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia")
autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
breaks=c("Data","5-MA"))
autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,2), series="2-MA") +
autolayer(ma(elecsales,3), series="3-MA") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50",
"2-MA"="blue", "3-MA"="green","5-MA"="red"),
breaks=c("Data","5-MA"))
autoplot(elecequip, series="Data")
library(magrittr)
elecequip %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
library(seasonal)
install.packages("seasonal")
library(seasonal)
elecequip %>% seas(x11="") -> fit
autoplot(fit) +
ggtitle("X11 decomposition of electrical equipment index")
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>% seas(x11="") -> fit
autoplot(fit) +
ggtitle("X11 decomposition of electrical equipment index")
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
fit <- stl(elecequip, t.window=13, s.window="periodic",
robust=TRUE)
fit <- stl(elecequip, t.window=13, s.window="periodic",
robust=TRUE)
View(fit)
autoplot(fit)
autoplot(fit)
fit %>% seasadj() %>% naive() %>%
autoplot() + ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
fit %>% forecast(method="naive") %>%
autoplot() + ylab("New orders index")
# The prediction intervals shown in this graph are constructed
# in the same way as the point forecasts. That is,
# the upper and lower limits of the prediction intervals on the
# seasonally adjusted data are “reseasonalized” by adding
# in the forecasts of the seasonal component.
# In this calculation, the uncertainty in the forecasts of the
# seasonal component has been ignored. The rationale for this
# choice is that the uncertainty in the seasonal component is
# much smaller than that for the seasonally adjusted data,
# and so it is a reasonable approximation to ignore it.
# A short-cut approach is to use the stlf() function.
# The following code will decompose the time series using STL,
# forecast the seasonally adjusted series,
# and return reseasonalize the forecasts.
fcast <- stlf(elecequip, method='naive')
# The stlf() function uses mstl() to carry out the decomposition,
# so there are default values for s.window and t.window.
# The prediction intervals shown in this graph are constructed
# in the same way as the point forecasts. That is,
# the upper and lower limits of the prediction intervals on the
# seasonally adjusted data are “reseasonalized” by adding
# in the forecasts of the seasonal component.
# In this calculation, the uncertainty in the forecasts of the
# seasonal component has been ignored. The rationale for this
# choice is that the uncertainty in the seasonal component is
# much smaller than that for the seasonally adjusted data,
# and so it is a reasonable approximation to ignore it.
# A short-cut approach is to use the stlf() function.
# The following code will decompose the time series using STL,
# forecast the seasonally adjusted series,
# and return reseasonalize the forecasts.
fcast <- stlf(elecequip, method='naive')
# The stlf() function uses mstl() to carry out the decomposition,
# so there are default values for s.window and t.window.
fcast <- stlf(elecequip, method='naive')
fcast <- stlf(elecequip, method='naive')
autoplot(fcast)
fit %>% forecast(method="naive") %>%
autoplot() + ylab("New orders index")
library(fpp2)
library(ggplot2)
library(magrittr)
library(seasonal)
library(tidyverse)
cbind("Sales ($million)" = a10,
"Monthly log sales" = log(a10),
"Annual change in log sales" = diff(log(a10),12)) %>%
autoplot(facets=TRUE) +
xlab("Year") + ylab("") +
ggtitle("Antidiabetic drug sales")
cbind("Billion kWh" = usmelec,
"Logs" = log(usmelec),
"Seasonally\n differenced logs" =
diff(log(usmelec),12),
"Doubly\n differenced logs" =
diff(diff(log(usmelec),12),1)) %>%
autoplot(facets=TRUE) +
xlab("Year") + ylab("") +
ggtitle("Monthly US net electricity generation")
install.packages("urca")
install.packages("urca")
library(urca)
goog %>% ur.kpss() %>% summary()
library(fpp2)
library(ggplot2)
library(magrittr)
library(seasonal)
library(tidyverse)
library(urca)
goog %>% ur.kpss() %>% summary()
library(fpp2)
library(ggplot2)
library(magrittr)
library(seasonal)
library(tidyverse)
library(urca)
goog %>% ur.kpss() %>% summary()
goog %>% diff() %>% ur.kpss() %>% summary()
?ndiffs()
?ndsiffs()
?ndsiffs()
?nsdiffs()
nsdiffs(goog)
nsdiffs(goog, test = "seas")
usmelec %>% log() %>% nsdiffs()
usmelec %>% log() %>% findfrequency()
usmelec %>% log() %>% findfrequency()
logged_usmelec <- usmelec %>% log()
View(logged_usmelec)
View(a10)
ggseasonplot(logged_usmelec, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Logged Consumption") +
ggtitle("Seasonal plot: Logged UM Monthly Electical Consumption")
ggseasonplot(logged_usmelec, polar=TRUE) +
ylab("Logged Consumption") +
ggtitle("Polar seasonal plot: Logged UM Monthly Electical Consumption")
?ets
ets(logged_usmelec)
x <- ts(logged_usmelec, frequency=365/12)
fit <- tbats(x)
seasonal <- !is.null(fit$seasonal)
?seasonal
vignette("seas")
install.package("astsa")
install.packages("astsa")
install.packages("astsa")
library(fpp2)
library(ggplot2)
library(magrittr)
library(seasonal)
library(tidyverse)
library(urca)
library(astsa)
